// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
	time "time"
)

// MockEventData is a mock of EventData interface
type MockEventData struct {
	ctrl     *gomock.Controller
	recorder *MockEventDataMockRecorder
}

// MockEventDataMockRecorder is the mock recorder for MockEventData
type MockEventDataMockRecorder struct {
	mock *MockEventData
}

// NewMockEventData creates a new mock instance
func NewMockEventData(ctrl *gomock.Controller) *MockEventData {
	mock := &MockEventData{ctrl: ctrl}
	mock.recorder = &MockEventDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventData) EXPECT() *MockEventDataMockRecorder {
	return m.recorder
}

// MockEvent is a mock of Event interface
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *MockEvent) Type() cqrs_es.EventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(cqrs_es.EventType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockEventMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockEvent)(nil).Type))
}

// Data mocks base method
func (m *MockEvent) Data() cqrs_es.EventData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(cqrs_es.EventData)
	return ret0
}

// Data indicates an expected call of Data
func (mr *MockEventMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockEvent)(nil).Data))
}

// Time mocks base method
func (m *MockEvent) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time
func (mr *MockEventMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockEvent)(nil).Time))
}

// AggregateType mocks base method
func (m *MockEvent) AggregateType() cqrs_es.AggregateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateType")
	ret0, _ := ret[0].(cqrs_es.AggregateType)
	return ret0
}

// AggregateType indicates an expected call of AggregateType
func (mr *MockEventMockRecorder) AggregateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateType", reflect.TypeOf((*MockEvent)(nil).AggregateType))
}

// AggregateID mocks base method
func (m *MockEvent) AggregateID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// AggregateID indicates an expected call of AggregateID
func (mr *MockEventMockRecorder) AggregateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateID", reflect.TypeOf((*MockEvent)(nil).AggregateID))
}

// Version mocks base method
func (m *MockEvent) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockEventMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEvent)(nil).Version))
}
