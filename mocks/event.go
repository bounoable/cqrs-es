// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	context "context"
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
	time "time"
)

// MockEventData is a mock of EventData interface
type MockEventData struct {
	ctrl     *gomock.Controller
	recorder *MockEventDataMockRecorder
}

// MockEventDataMockRecorder is the mock recorder for MockEventData
type MockEventDataMockRecorder struct {
	mock *MockEventData
}

// NewMockEventData creates a new mock instance
func NewMockEventData(ctrl *gomock.Controller) *MockEventData {
	mock := &MockEventData{ctrl: ctrl}
	mock.recorder = &MockEventDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventData) EXPECT() *MockEventDataMockRecorder {
	return m.recorder
}

// MockEvent is a mock of Event interface
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *MockEvent) Type() cqrs_es.EventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(cqrs_es.EventType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockEventMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockEvent)(nil).Type))
}

// Data mocks base method
func (m *MockEvent) Data() cqrs_es.EventData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(cqrs_es.EventData)
	return ret0
}

// Data indicates an expected call of Data
func (mr *MockEventMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockEvent)(nil).Data))
}

// Time mocks base method
func (m *MockEvent) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time
func (mr *MockEventMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockEvent)(nil).Time))
}

// AggregateType mocks base method
func (m *MockEvent) AggregateType() cqrs_es.AggregateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateType")
	ret0, _ := ret[0].(cqrs_es.AggregateType)
	return ret0
}

// AggregateType indicates an expected call of AggregateType
func (mr *MockEventMockRecorder) AggregateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateType", reflect.TypeOf((*MockEvent)(nil).AggregateType))
}

// AggregateID mocks base method
func (m *MockEvent) AggregateID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// AggregateID indicates an expected call of AggregateID
func (mr *MockEventMockRecorder) AggregateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateID", reflect.TypeOf((*MockEvent)(nil).AggregateID))
}

// Version mocks base method
func (m *MockEvent) Version() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockEventMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockEvent)(nil).Version))
}

// MockEventPublisher is a mock of EventPublisher interface
type MockEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherMockRecorder
}

// MockEventPublisherMockRecorder is the mock recorder for MockEventPublisher
type MockEventPublisherMockRecorder struct {
	mock *MockEventPublisher
}

// NewMockEventPublisher creates a new mock instance
func NewMockEventPublisher(ctrl *gomock.Controller) *MockEventPublisher {
	mock := &MockEventPublisher{ctrl: ctrl}
	mock.recorder = &MockEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventPublisher) EXPECT() *MockEventPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockEventPublisher) Publish(ctx context.Context, events ...cqrs_es.Event) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range events {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockEventPublisherMockRecorder) Publish(ctx interface{}, events ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, events...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventPublisher)(nil).Publish), varargs...)
}

// MockEventSubscriber is a mock of EventSubscriber interface
type MockEventSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockEventSubscriberMockRecorder
}

// MockEventSubscriberMockRecorder is the mock recorder for MockEventSubscriber
type MockEventSubscriberMockRecorder struct {
	mock *MockEventSubscriber
}

// NewMockEventSubscriber creates a new mock instance
func NewMockEventSubscriber(ctrl *gomock.Controller) *MockEventSubscriber {
	mock := &MockEventSubscriber{ctrl: ctrl}
	mock.recorder = &MockEventSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventSubscriber) EXPECT() *MockEventSubscriberMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockEventSubscriber) Subscribe(ctx context.Context, types ...cqrs_es.EventType) (<-chan cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range types {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(<-chan cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockEventSubscriberMockRecorder) Subscribe(ctx interface{}, types ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, types...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventSubscriber)(nil).Subscribe), varargs...)
}

// MockEventBus is a mock of EventBus interface
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockEventBus) Publish(ctx context.Context, events ...cqrs_es.Event) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range events {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockEventBusMockRecorder) Publish(ctx interface{}, events ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, events...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), varargs...)
}

// Subscribe mocks base method
func (m *MockEventBus) Subscribe(ctx context.Context, types ...cqrs_es.EventType) (<-chan cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range types {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(<-chan cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockEventBusMockRecorder) Subscribe(ctx interface{}, types ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, types...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBus)(nil).Subscribe), varargs...)
}

// MockEventConfig is a mock of EventConfig interface
type MockEventConfig struct {
	ctrl     *gomock.Controller
	recorder *MockEventConfigMockRecorder
}

// MockEventConfigMockRecorder is the mock recorder for MockEventConfig
type MockEventConfigMockRecorder struct {
	mock *MockEventConfig
}

// NewMockEventConfig creates a new mock instance
func NewMockEventConfig(ctrl *gomock.Controller) *MockEventConfig {
	mock := &MockEventConfig{ctrl: ctrl}
	mock.recorder = &MockEventConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventConfig) EXPECT() *MockEventConfigMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockEventConfig) Register(arg0 cqrs_es.EventType, arg1 cqrs_es.EventData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockEventConfigMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEventConfig)(nil).Register), arg0, arg1)
}

// NewData mocks base method
func (m *MockEventConfig) NewData(arg0 cqrs_es.EventType) (cqrs_es.EventData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewData", arg0)
	ret0, _ := ret[0].(cqrs_es.EventData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewData indicates an expected call of NewData
func (mr *MockEventConfigMockRecorder) NewData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewData", reflect.TypeOf((*MockEventConfig)(nil).NewData), arg0)
}

// Protos mocks base method
func (m *MockEventConfig) Protos() map[cqrs_es.EventType]cqrs_es.EventData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Protos")
	ret0, _ := ret[0].(map[cqrs_es.EventType]cqrs_es.EventData)
	return ret0
}

// Protos indicates an expected call of Protos
func (mr *MockEventConfigMockRecorder) Protos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Protos", reflect.TypeOf((*MockEventConfig)(nil).Protos))
}

// MockEventStore is a mock of EventStore interface
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockEventStore) Save(ctx context.Context, originalVersion int, events ...cqrs_es.Event) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, originalVersion}
	for _, a := range events {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockEventStoreMockRecorder) Save(ctx, originalVersion interface{}, events ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, originalVersion}, events...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEventStore)(nil).Save), varargs...)
}

// Find mocks base method
func (m *MockEventStore) Find(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, version int) (cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, aggregateType, aggregateID, version)
	ret0, _ := ret[0].(cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockEventStoreMockRecorder) Find(ctx, aggregateType, aggregateID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockEventStore)(nil).Find), ctx, aggregateType, aggregateID, version)
}

// Fetch mocks base method
func (m *MockEventStore) Fetch(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, from, to int) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, aggregateType, aggregateID, from, to)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockEventStoreMockRecorder) Fetch(ctx, aggregateType, aggregateID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockEventStore)(nil).Fetch), ctx, aggregateType, aggregateID, from, to)
}

// FetchAll mocks base method
func (m *MockEventStore) FetchAll(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx, aggregateType, aggregateID)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll
func (mr *MockEventStoreMockRecorder) FetchAll(ctx, aggregateType, aggregateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockEventStore)(nil).FetchAll), ctx, aggregateType, aggregateID)
}

// FetchFrom mocks base method
func (m *MockEventStore) FetchFrom(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, from int) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFrom", ctx, aggregateType, aggregateID, from)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFrom indicates an expected call of FetchFrom
func (mr *MockEventStoreMockRecorder) FetchFrom(ctx, aggregateType, aggregateID, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFrom", reflect.TypeOf((*MockEventStore)(nil).FetchFrom), ctx, aggregateType, aggregateID, from)
}

// FetchTo mocks base method
func (m *MockEventStore) FetchTo(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, to int) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTo", ctx, aggregateType, aggregateID, to)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTo indicates an expected call of FetchTo
func (mr *MockEventStoreMockRecorder) FetchTo(ctx, aggregateType, aggregateID, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTo", reflect.TypeOf((*MockEventStore)(nil).FetchTo), ctx, aggregateType, aggregateID, to)
}

// RemoveAll mocks base method
func (m *MockEventStore) RemoveAll(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", ctx, aggregateType, aggregateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockEventStoreMockRecorder) RemoveAll(ctx, aggregateType, aggregateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockEventStore)(nil).RemoveAll), ctx, aggregateType, aggregateID)
}

// Query mocks base method
func (m *MockEventStore) Query(ctx context.Context, query cqrs_es.EventQuery) (cqrs_es.EventCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query)
	ret0, _ := ret[0].(cqrs_es.EventCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockEventStoreMockRecorder) Query(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockEventStore)(nil).Query), ctx, query)
}

// MockEventQuery is a mock of EventQuery interface
type MockEventQuery struct {
	ctrl     *gomock.Controller
	recorder *MockEventQueryMockRecorder
}

// MockEventQueryMockRecorder is the mock recorder for MockEventQuery
type MockEventQueryMockRecorder struct {
	mock *MockEventQuery
}

// NewMockEventQuery creates a new mock instance
func NewMockEventQuery(ctrl *gomock.Controller) *MockEventQuery {
	mock := &MockEventQuery{ctrl: ctrl}
	mock.recorder = &MockEventQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventQuery) EXPECT() *MockEventQueryMockRecorder {
	return m.recorder
}

// EventTypes mocks base method
func (m *MockEventQuery) EventTypes() []cqrs_es.EventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventTypes")
	ret0, _ := ret[0].([]cqrs_es.EventType)
	return ret0
}

// EventTypes indicates an expected call of EventTypes
func (mr *MockEventQueryMockRecorder) EventTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventTypes", reflect.TypeOf((*MockEventQuery)(nil).EventTypes))
}

// AggregateTypes mocks base method
func (m *MockEventQuery) AggregateTypes() []cqrs_es.AggregateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateTypes")
	ret0, _ := ret[0].([]cqrs_es.AggregateType)
	return ret0
}

// AggregateTypes indicates an expected call of AggregateTypes
func (mr *MockEventQueryMockRecorder) AggregateTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateTypes", reflect.TypeOf((*MockEventQuery)(nil).AggregateTypes))
}

// AggregateIDs mocks base method
func (m *MockEventQuery) AggregateIDs() []uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateIDs")
	ret0, _ := ret[0].([]uuid.UUID)
	return ret0
}

// AggregateIDs indicates an expected call of AggregateIDs
func (mr *MockEventQueryMockRecorder) AggregateIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateIDs", reflect.TypeOf((*MockEventQuery)(nil).AggregateIDs))
}

// Versions mocks base method
func (m *MockEventQuery) Versions() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Versions")
	ret0, _ := ret[0].([]int)
	return ret0
}

// Versions indicates an expected call of Versions
func (mr *MockEventQueryMockRecorder) Versions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Versions", reflect.TypeOf((*MockEventQuery)(nil).Versions))
}

// VersionRanges mocks base method
func (m *MockEventQuery) VersionRanges() [][2]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionRanges")
	ret0, _ := ret[0].([][2]int)
	return ret0
}

// VersionRanges indicates an expected call of VersionRanges
func (mr *MockEventQueryMockRecorder) VersionRanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionRanges", reflect.TypeOf((*MockEventQuery)(nil).VersionRanges))
}

// MockEventCursor is a mock of EventCursor interface
type MockEventCursor struct {
	ctrl     *gomock.Controller
	recorder *MockEventCursorMockRecorder
}

// MockEventCursorMockRecorder is the mock recorder for MockEventCursor
type MockEventCursorMockRecorder struct {
	mock *MockEventCursor
}

// NewMockEventCursor creates a new mock instance
func NewMockEventCursor(ctrl *gomock.Controller) *MockEventCursor {
	mock := &MockEventCursor{ctrl: ctrl}
	mock.recorder = &MockEventCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventCursor) EXPECT() *MockEventCursorMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockEventCursor) Next(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockEventCursorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockEventCursor)(nil).Next), arg0)
}

// Event mocks base method
func (m *MockEventCursor) Event() cqrs_es.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event")
	ret0, _ := ret[0].(cqrs_es.Event)
	return ret0
}

// Event indicates an expected call of Event
func (mr *MockEventCursorMockRecorder) Event() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockEventCursor)(nil).Event))
}

// Err mocks base method
func (m *MockEventCursor) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockEventCursorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockEventCursor)(nil).Err))
}

// Close mocks base method
func (m *MockEventCursor) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockEventCursorMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventCursor)(nil).Close), arg0)
}
