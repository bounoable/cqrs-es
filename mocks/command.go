// Code generated by MockGen. DO NOT EDIT.
// Source: command.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	context "context"
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Type mocks base method
func (m *MockCommand) Type() cqrs_es.CommandType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(cqrs_es.CommandType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockCommandMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockCommand)(nil).Type))
}

// AggregateType mocks base method
func (m *MockCommand) AggregateType() cqrs_es.AggregateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateType")
	ret0, _ := ret[0].(cqrs_es.AggregateType)
	return ret0
}

// AggregateType indicates an expected call of AggregateType
func (mr *MockCommandMockRecorder) AggregateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateType", reflect.TypeOf((*MockCommand)(nil).AggregateType))
}

// AggregateID mocks base method
func (m *MockCommand) AggregateID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// AggregateID indicates an expected call of AggregateID
func (mr *MockCommandMockRecorder) AggregateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateID", reflect.TypeOf((*MockCommand)(nil).AggregateID))
}

// MockCommandBus is a mock of CommandBus interface
type MockCommandBus struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBusMockRecorder
}

// MockCommandBusMockRecorder is the mock recorder for MockCommandBus
type MockCommandBusMockRecorder struct {
	mock *MockCommandBus
}

// NewMockCommandBus creates a new mock instance
func NewMockCommandBus(ctrl *gomock.Controller) *MockCommandBus {
	mock := &MockCommandBus{ctrl: ctrl}
	mock.recorder = &MockCommandBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandBus) EXPECT() *MockCommandBusMockRecorder {
	return m.recorder
}

// Dispatch mocks base method
func (m *MockCommandBus) Dispatch(arg0 context.Context, arg1 cqrs_es.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockCommandBusMockRecorder) Dispatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockCommandBus)(nil).Dispatch), arg0, arg1)
}

// MockCommandHandler is a mock of CommandHandler interface
type MockCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommandHandlerMockRecorder
}

// MockCommandHandlerMockRecorder is the mock recorder for MockCommandHandler
type MockCommandHandlerMockRecorder struct {
	mock *MockCommandHandler
}

// NewMockCommandHandler creates a new mock instance
func NewMockCommandHandler(ctrl *gomock.Controller) *MockCommandHandler {
	mock := &MockCommandHandler{ctrl: ctrl}
	mock.recorder = &MockCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandHandler) EXPECT() *MockCommandHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockCommandHandler) Handle(arg0 context.Context, arg1 cqrs_es.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockCommandHandlerMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandHandler)(nil).Handle), arg0, arg1)
}

// MockCommandConfig is a mock of CommandConfig interface
type MockCommandConfig struct {
	ctrl     *gomock.Controller
	recorder *MockCommandConfigMockRecorder
}

// MockCommandConfigMockRecorder is the mock recorder for MockCommandConfig
type MockCommandConfigMockRecorder struct {
	mock *MockCommandConfig
}

// NewMockCommandConfig creates a new mock instance
func NewMockCommandConfig(ctrl *gomock.Controller) *MockCommandConfig {
	mock := &MockCommandConfig{ctrl: ctrl}
	mock.recorder = &MockCommandConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommandConfig) EXPECT() *MockCommandConfigMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockCommandConfig) Register(arg0 cqrs_es.CommandType, arg1 cqrs_es.CommandHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockCommandConfigMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCommandConfig)(nil).Register), arg0, arg1)
}

// Handler mocks base method
func (m *MockCommandConfig) Handler(arg0 cqrs_es.CommandType) (cqrs_es.CommandHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", arg0)
	ret0, _ := ret[0].(cqrs_es.CommandHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler
func (mr *MockCommandConfigMockRecorder) Handler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockCommandConfig)(nil).Handler), arg0)
}

// Handlers mocks base method
func (m *MockCommandConfig) Handlers() map[cqrs_es.CommandType]cqrs_es.CommandHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handlers")
	ret0, _ := ret[0].(map[cqrs_es.CommandType]cqrs_es.CommandHandler)
	return ret0
}

// Handlers indicates an expected call of Handlers
func (mr *MockCommandConfigMockRecorder) Handlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handlers", reflect.TypeOf((*MockCommandConfig)(nil).Handlers))
}
