// Code generated by MockGen. DO NOT EDIT.
// Source: setup.go

// Package mock_setup is a generated GoMock package.
package mock_setup

import (
	cqrs_es "github.com/bounoable/cqrs-es"
	setup "github.com/bounoable/cqrs-es/setup"
	gomock "github.com/golang/mock/gomock"
	log "log"
	reflect "reflect"
)

// MockSetup is a mock of Setup interface
type MockSetup struct {
	ctrl     *gomock.Controller
	recorder *MockSetupMockRecorder
}

// MockSetupMockRecorder is the mock recorder for MockSetup
type MockSetupMockRecorder struct {
	mock *MockSetup
}

// NewMockSetup creates a new mock instance
func NewMockSetup(ctrl *gomock.Controller) *MockSetup {
	mock := &MockSetup{ctrl: ctrl}
	mock.recorder = &MockSetupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetup) EXPECT() *MockSetupMockRecorder {
	return m.recorder
}

// SetLogger mocks base method
func (m *MockSetup) SetLogger(arg0 *log.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockSetupMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockSetup)(nil).SetLogger), arg0)
}

// AggregateConfig mocks base method
func (m *MockSetup) AggregateConfig() cqrs_es.AggregateConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateConfig")
	ret0, _ := ret[0].(cqrs_es.AggregateConfig)
	return ret0
}

// AggregateConfig indicates an expected call of AggregateConfig
func (mr *MockSetupMockRecorder) AggregateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateConfig", reflect.TypeOf((*MockSetup)(nil).AggregateConfig))
}

// EventConfig mocks base method
func (m *MockSetup) EventConfig() cqrs_es.EventConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventConfig")
	ret0, _ := ret[0].(cqrs_es.EventConfig)
	return ret0
}

// EventConfig indicates an expected call of EventConfig
func (mr *MockSetupMockRecorder) EventConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConfig", reflect.TypeOf((*MockSetup)(nil).EventConfig))
}

// CommandConfig mocks base method
func (m *MockSetup) CommandConfig() cqrs_es.CommandConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandConfig")
	ret0, _ := ret[0].(cqrs_es.CommandConfig)
	return ret0
}

// CommandConfig indicates an expected call of CommandConfig
func (mr *MockSetupMockRecorder) CommandConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandConfig", reflect.TypeOf((*MockSetup)(nil).CommandConfig))
}

// SetEventStoreFactory mocks base method
func (m *MockSetup) SetEventStoreFactory(arg0 setup.EventStoreFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventStoreFactory", arg0)
}

// SetEventStoreFactory indicates an expected call of SetEventStoreFactory
func (mr *MockSetupMockRecorder) SetEventStoreFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStoreFactory", reflect.TypeOf((*MockSetup)(nil).SetEventStoreFactory), arg0)
}

// SetEventBusFactory mocks base method
func (m *MockSetup) SetEventBusFactory(arg0 setup.EventBusFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventBusFactory", arg0)
}

// SetEventBusFactory indicates an expected call of SetEventBusFactory
func (mr *MockSetupMockRecorder) SetEventBusFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventBusFactory", reflect.TypeOf((*MockSetup)(nil).SetEventBusFactory), arg0)
}

// SetCommandBusFactory mocks base method
func (m *MockSetup) SetCommandBusFactory(arg0 setup.CommandBusFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommandBusFactory", arg0)
}

// SetCommandBusFactory indicates an expected call of SetCommandBusFactory
func (mr *MockSetupMockRecorder) SetCommandBusFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommandBusFactory", reflect.TypeOf((*MockSetup)(nil).SetCommandBusFactory), arg0)
}

// AddCommandHandlerFactory mocks base method
func (m *MockSetup) AddCommandHandlerFactory(arg0 ...setup.CommandHandlerFactory) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCommandHandlerFactory", varargs...)
}

// AddCommandHandlerFactory indicates an expected call of AddCommandHandlerFactory
func (mr *MockSetupMockRecorder) AddCommandHandlerFactory(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommandHandlerFactory", reflect.TypeOf((*MockSetup)(nil).AddCommandHandlerFactory), arg0...)
}

// SetSnapshotRepositoryFactory mocks base method
func (m *MockSetup) SetSnapshotRepositoryFactory(arg0 setup.SnapshotRepositoryFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSnapshotRepositoryFactory", arg0)
}

// SetSnapshotRepositoryFactory indicates an expected call of SetSnapshotRepositoryFactory
func (mr *MockSetupMockRecorder) SetSnapshotRepositoryFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotRepositoryFactory", reflect.TypeOf((*MockSetup)(nil).SetSnapshotRepositoryFactory), arg0)
}

// SetAggregateRepositoryFactory mocks base method
func (m *MockSetup) SetAggregateRepositoryFactory(arg0 setup.AggregateRepositoryFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAggregateRepositoryFactory", arg0)
}

// SetAggregateRepositoryFactory indicates an expected call of SetAggregateRepositoryFactory
func (mr *MockSetupMockRecorder) SetAggregateRepositoryFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAggregateRepositoryFactory", reflect.TypeOf((*MockSetup)(nil).SetAggregateRepositoryFactory), arg0)
}

// EventStore mocks base method
func (m *MockSetup) EventStore() cqrs_es.EventStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStore")
	ret0, _ := ret[0].(cqrs_es.EventStore)
	return ret0
}

// EventStore indicates an expected call of EventStore
func (mr *MockSetupMockRecorder) EventStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStore", reflect.TypeOf((*MockSetup)(nil).EventStore))
}

// EventBus mocks base method
func (m *MockSetup) EventBus() cqrs_es.EventBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBus")
	ret0, _ := ret[0].(cqrs_es.EventBus)
	return ret0
}

// EventBus indicates an expected call of EventBus
func (mr *MockSetupMockRecorder) EventBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBus", reflect.TypeOf((*MockSetup)(nil).EventBus))
}

// CommandBus mocks base method
func (m *MockSetup) CommandBus() cqrs_es.CommandBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandBus")
	ret0, _ := ret[0].(cqrs_es.CommandBus)
	return ret0
}

// CommandBus indicates an expected call of CommandBus
func (mr *MockSetupMockRecorder) CommandBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandBus", reflect.TypeOf((*MockSetup)(nil).CommandBus))
}

// SnapshotRepository mocks base method
func (m *MockSetup) SnapshotRepository() cqrs_es.SnapshotRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRepository")
	ret0, _ := ret[0].(cqrs_es.SnapshotRepository)
	return ret0
}

// SnapshotRepository indicates an expected call of SnapshotRepository
func (mr *MockSetupMockRecorder) SnapshotRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRepository", reflect.TypeOf((*MockSetup)(nil).SnapshotRepository))
}

// AggregateRepository mocks base method
func (m *MockSetup) AggregateRepository() cqrs_es.AggregateRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateRepository")
	ret0, _ := ret[0].(cqrs_es.AggregateRepository)
	return ret0
}

// AggregateRepository indicates an expected call of AggregateRepository
func (mr *MockSetupMockRecorder) AggregateRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateRepository", reflect.TypeOf((*MockSetup)(nil).AggregateRepository))
}

// EventStoreResolver mocks base method
func (m *MockSetup) EventStoreResolver() func() (cqrs_es.EventStore, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStoreResolver")
	ret0, _ := ret[0].(func() (cqrs_es.EventStore, bool))
	return ret0
}

// EventStoreResolver indicates an expected call of EventStoreResolver
func (mr *MockSetupMockRecorder) EventStoreResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStoreResolver", reflect.TypeOf((*MockSetup)(nil).EventStoreResolver))
}

// EventBusResolver mocks base method
func (m *MockSetup) EventBusResolver() func() (cqrs_es.EventBus, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBusResolver")
	ret0, _ := ret[0].(func() (cqrs_es.EventBus, bool))
	return ret0
}

// EventBusResolver indicates an expected call of EventBusResolver
func (mr *MockSetupMockRecorder) EventBusResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBusResolver", reflect.TypeOf((*MockSetup)(nil).EventBusResolver))
}

// EventPublisherResolver mocks base method
func (m *MockSetup) EventPublisherResolver() func() (cqrs_es.EventPublisher, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventPublisherResolver")
	ret0, _ := ret[0].(func() (cqrs_es.EventPublisher, bool))
	return ret0
}

// EventPublisherResolver indicates an expected call of EventPublisherResolver
func (mr *MockSetupMockRecorder) EventPublisherResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPublisherResolver", reflect.TypeOf((*MockSetup)(nil).EventPublisherResolver))
}

// EventSubscriberResolver mocks base method
func (m *MockSetup) EventSubscriberResolver() func() (cqrs_es.EventSubscriber, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventSubscriberResolver")
	ret0, _ := ret[0].(func() (cqrs_es.EventSubscriber, bool))
	return ret0
}

// EventSubscriberResolver indicates an expected call of EventSubscriberResolver
func (mr *MockSetupMockRecorder) EventSubscriberResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventSubscriberResolver", reflect.TypeOf((*MockSetup)(nil).EventSubscriberResolver))
}

// CommandBusResolver mocks base method
func (m *MockSetup) CommandBusResolver() func() (cqrs_es.CommandBus, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandBusResolver")
	ret0, _ := ret[0].(func() (cqrs_es.CommandBus, bool))
	return ret0
}

// CommandBusResolver indicates an expected call of CommandBusResolver
func (mr *MockSetupMockRecorder) CommandBusResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandBusResolver", reflect.TypeOf((*MockSetup)(nil).CommandBusResolver))
}

// SnapshotRepositoryResolver mocks base method
func (m *MockSetup) SnapshotRepositoryResolver() func() (cqrs_es.SnapshotRepository, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotRepositoryResolver")
	ret0, _ := ret[0].(func() (cqrs_es.SnapshotRepository, bool))
	return ret0
}

// SnapshotRepositoryResolver indicates an expected call of SnapshotRepositoryResolver
func (mr *MockSetupMockRecorder) SnapshotRepositoryResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotRepositoryResolver", reflect.TypeOf((*MockSetup)(nil).SnapshotRepositoryResolver))
}

// AggregateRepositoryResolver mocks base method
func (m *MockSetup) AggregateRepositoryResolver() func() (cqrs_es.AggregateRepository, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateRepositoryResolver")
	ret0, _ := ret[0].(func() (cqrs_es.AggregateRepository, bool))
	return ret0
}

// AggregateRepositoryResolver indicates an expected call of AggregateRepositoryResolver
func (mr *MockSetupMockRecorder) AggregateRepositoryResolver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateRepositoryResolver", reflect.TypeOf((*MockSetup)(nil).AggregateRepositoryResolver))
}

// RegisterAggregate mocks base method
func (m *MockSetup) RegisterAggregate(arg0 cqrs_es.AggregateType, arg1 cqrs_es.AggregateFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterAggregate", arg0, arg1)
}

// RegisterAggregate indicates an expected call of RegisterAggregate
func (mr *MockSetupMockRecorder) RegisterAggregate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAggregate", reflect.TypeOf((*MockSetup)(nil).RegisterAggregate), arg0, arg1)
}

// RegisterEvent mocks base method
func (m *MockSetup) RegisterEvent(arg0 cqrs_es.EventType, arg1 cqrs_es.EventData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterEvent", arg0, arg1)
}

// RegisterEvent indicates an expected call of RegisterEvent
func (mr *MockSetupMockRecorder) RegisterEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEvent", reflect.TypeOf((*MockSetup)(nil).RegisterEvent), arg0, arg1)
}

// RegisterCommand mocks base method
func (m *MockSetup) RegisterCommand(arg0 cqrs_es.CommandType, arg1 cqrs_es.CommandHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCommand", arg0, arg1)
}

// RegisterCommand indicates an expected call of RegisterCommand
func (mr *MockSetupMockRecorder) RegisterCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommand", reflect.TypeOf((*MockSetup)(nil).RegisterCommand), arg0, arg1)
}
