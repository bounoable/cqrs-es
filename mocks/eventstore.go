// Code generated by MockGen. DO NOT EDIT.
// Source: eventstore.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	context "context"
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockEventStore is a mock of EventStore interface
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockEventStore) Save(ctx context.Context, originalVersion int, events ...cqrs_es.Event) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, originalVersion}
	for _, a := range events {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockEventStoreMockRecorder) Save(ctx, originalVersion interface{}, events ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, originalVersion}, events...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEventStore)(nil).Save), varargs...)
}

// Find mocks base method
func (m *MockEventStore) Find(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, version int) (cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, aggregateType, aggregateID, version)
	ret0, _ := ret[0].(cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockEventStoreMockRecorder) Find(ctx, aggregateType, aggregateID, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockEventStore)(nil).Find), ctx, aggregateType, aggregateID, version)
}

// Fetch mocks base method
func (m *MockEventStore) Fetch(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, from, to int) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, aggregateType, aggregateID, from, to)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockEventStoreMockRecorder) Fetch(ctx, aggregateType, aggregateID, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockEventStore)(nil).Fetch), ctx, aggregateType, aggregateID, from, to)
}

// FetchAll mocks base method
func (m *MockEventStore) FetchAll(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx, aggregateType, aggregateID)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll
func (mr *MockEventStoreMockRecorder) FetchAll(ctx, aggregateType, aggregateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockEventStore)(nil).FetchAll), ctx, aggregateType, aggregateID)
}

// FetchFrom mocks base method
func (m *MockEventStore) FetchFrom(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, from int) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFrom", ctx, aggregateType, aggregateID, from)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFrom indicates an expected call of FetchFrom
func (mr *MockEventStoreMockRecorder) FetchFrom(ctx, aggregateType, aggregateID, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFrom", reflect.TypeOf((*MockEventStore)(nil).FetchFrom), ctx, aggregateType, aggregateID, from)
}

// FetchTo mocks base method
func (m *MockEventStore) FetchTo(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID, to int) ([]cqrs_es.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTo", ctx, aggregateType, aggregateID, to)
	ret0, _ := ret[0].([]cqrs_es.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTo indicates an expected call of FetchTo
func (mr *MockEventStoreMockRecorder) FetchTo(ctx, aggregateType, aggregateID, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTo", reflect.TypeOf((*MockEventStore)(nil).FetchTo), ctx, aggregateType, aggregateID, to)
}

// RemoveAll mocks base method
func (m *MockEventStore) RemoveAll(ctx context.Context, aggregateType cqrs_es.AggregateType, aggregateID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", ctx, aggregateType, aggregateID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockEventStoreMockRecorder) RemoveAll(ctx, aggregateType, aggregateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockEventStore)(nil).RemoveAll), ctx, aggregateType, aggregateID)
}
