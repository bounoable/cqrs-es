// Code generated by MockGen. DO NOT EDIT.
// Source: container.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockContainer is a mock of Container interface
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// AggregateConfig mocks base method
func (m *MockContainer) AggregateConfig() cqrs_es.AggregateConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateConfig")
	ret0, _ := ret[0].(cqrs_es.AggregateConfig)
	return ret0
}

// AggregateConfig indicates an expected call of AggregateConfig
func (mr *MockContainerMockRecorder) AggregateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateConfig", reflect.TypeOf((*MockContainer)(nil).AggregateConfig))
}

// EventConfig mocks base method
func (m *MockContainer) EventConfig() cqrs_es.EventConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventConfig")
	ret0, _ := ret[0].(cqrs_es.EventConfig)
	return ret0
}

// EventConfig indicates an expected call of EventConfig
func (mr *MockContainerMockRecorder) EventConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConfig", reflect.TypeOf((*MockContainer)(nil).EventConfig))
}

// CommandConfig mocks base method
func (m *MockContainer) CommandConfig() cqrs_es.CommandConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandConfig")
	ret0, _ := ret[0].(cqrs_es.CommandConfig)
	return ret0
}

// CommandConfig indicates an expected call of CommandConfig
func (mr *MockContainerMockRecorder) CommandConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandConfig", reflect.TypeOf((*MockContainer)(nil).CommandConfig))
}

// EventBus mocks base method
func (m *MockContainer) EventBus() cqrs_es.EventBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBus")
	ret0, _ := ret[0].(cqrs_es.EventBus)
	return ret0
}

// EventBus indicates an expected call of EventBus
func (mr *MockContainerMockRecorder) EventBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBus", reflect.TypeOf((*MockContainer)(nil).EventBus))
}

// EventStore mocks base method
func (m *MockContainer) EventStore() cqrs_es.EventStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStore")
	ret0, _ := ret[0].(cqrs_es.EventStore)
	return ret0
}

// EventStore indicates an expected call of EventStore
func (mr *MockContainerMockRecorder) EventStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStore", reflect.TypeOf((*MockContainer)(nil).EventStore))
}

// CommandBus mocks base method
func (m *MockContainer) CommandBus() cqrs_es.CommandBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandBus")
	ret0, _ := ret[0].(cqrs_es.CommandBus)
	return ret0
}

// CommandBus indicates an expected call of CommandBus
func (mr *MockContainerMockRecorder) CommandBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandBus", reflect.TypeOf((*MockContainer)(nil).CommandBus))
}

// Snapshots mocks base method
func (m *MockContainer) Snapshots() cqrs_es.SnapshotRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots")
	ret0, _ := ret[0].(cqrs_es.SnapshotRepository)
	return ret0
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockContainerMockRecorder) Snapshots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockContainer)(nil).Snapshots))
}

// Aggregates mocks base method
func (m *MockContainer) Aggregates() cqrs_es.AggregateRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregates")
	ret0, _ := ret[0].(cqrs_es.AggregateRepository)
	return ret0
}

// Aggregates indicates an expected call of Aggregates
func (mr *MockContainerMockRecorder) Aggregates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregates", reflect.TypeOf((*MockContainer)(nil).Aggregates))
}
