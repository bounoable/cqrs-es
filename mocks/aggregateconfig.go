// Code generated by MockGen. DO NOT EDIT.
// Source: aggregateconfig.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	cqrs "github.com/bounoable/cqrs"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockAggregateConfig is a mock of AggregateConfig interface
type MockAggregateConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateConfigMockRecorder
}

// MockAggregateConfigMockRecorder is the mock recorder for MockAggregateConfig
type MockAggregateConfigMockRecorder struct {
	mock *MockAggregateConfig
}

// NewMockAggregateConfig creates a new mock instance
func NewMockAggregateConfig(ctrl *gomock.Controller) *MockAggregateConfig {
	mock := &MockAggregateConfig{ctrl: ctrl}
	mock.recorder = &MockAggregateConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregateConfig) EXPECT() *MockAggregateConfigMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockAggregateConfig) Register(arg0 cqrs.AggregateType, arg1 cqrs.AggregateFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockAggregateConfigMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAggregateConfig)(nil).Register), arg0, arg1)
}

// New mocks base method
func (m *MockAggregateConfig) New(arg0 cqrs.AggregateType, arg1 uuid.UUID) (cqrs.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(cqrs.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockAggregateConfigMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockAggregateConfig)(nil).New), arg0, arg1)
}

// Factories mocks base method
func (m *MockAggregateConfig) Factories() map[cqrs.AggregateType]cqrs.AggregateFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Factories")
	ret0, _ := ret[0].(map[cqrs.AggregateType]cqrs.AggregateFactory)
	return ret0
}

// Factories indicates an expected call of Factories
func (mr *MockAggregateConfigMockRecorder) Factories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Factories", reflect.TypeOf((*MockAggregateConfig)(nil).Factories))
}
