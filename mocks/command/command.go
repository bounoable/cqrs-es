// Code generated by MockGen. DO NOT EDIT.
// Source: command.go

// Package mock_command is a generated GoMock package.
package mock_command

import (
	cqrs_es "github.com/bounoable/cqrs-es"
	command "github.com/bounoable/cqrs-es/command"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// CommandType mocks base method
func (m *MockCommand) CommandType() command.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandType")
	ret0, _ := ret[0].(command.Type)
	return ret0
}

// CommandType indicates an expected call of CommandType
func (mr *MockCommandMockRecorder) CommandType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandType", reflect.TypeOf((*MockCommand)(nil).CommandType))
}

// AggregateType mocks base method
func (m *MockCommand) AggregateType() cqrs_es.AggregateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateType")
	ret0, _ := ret[0].(cqrs_es.AggregateType)
	return ret0
}

// AggregateType indicates an expected call of AggregateType
func (mr *MockCommandMockRecorder) AggregateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateType", reflect.TypeOf((*MockCommand)(nil).AggregateType))
}

// AggregateID mocks base method
func (m *MockCommand) AggregateID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// AggregateID indicates an expected call of AggregateID
func (mr *MockCommandMockRecorder) AggregateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateID", reflect.TypeOf((*MockCommand)(nil).AggregateID))
}
