// Code generated by MockGen. DO NOT EDIT.
// Source: bus.go

// Package mock_command is a generated GoMock package.
package mock_command

import (
	context "context"
	command "github.com/bounoable/cqrs-es/command"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBus is a mock of Bus interface
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// Dispatch mocks base method
func (m *MockBus) Dispatch(arg0 context.Context, arg1 command.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockBusMockRecorder) Dispatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockBus)(nil).Dispatch), arg0, arg1)
}
