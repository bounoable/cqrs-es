// Code generated by MockGen. DO NOT EDIT.
// Source: aggregate.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	context "context"
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockAggregate is a mock of Aggregate interface
type MockAggregate struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateMockRecorder
}

// MockAggregateMockRecorder is the mock recorder for MockAggregate
type MockAggregateMockRecorder struct {
	mock *MockAggregate
}

// NewMockAggregate creates a new mock instance
func NewMockAggregate(ctrl *gomock.Controller) *MockAggregate {
	mock := &MockAggregate{ctrl: ctrl}
	mock.recorder = &MockAggregateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregate) EXPECT() *MockAggregateMockRecorder {
	return m.recorder
}

// AggregateID mocks base method
func (m *MockAggregate) AggregateID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// AggregateID indicates an expected call of AggregateID
func (mr *MockAggregateMockRecorder) AggregateID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateID", reflect.TypeOf((*MockAggregate)(nil).AggregateID))
}

// AggregateType mocks base method
func (m *MockAggregate) AggregateType() cqrs_es.AggregateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateType")
	ret0, _ := ret[0].(cqrs_es.AggregateType)
	return ret0
}

// AggregateType indicates an expected call of AggregateType
func (mr *MockAggregateMockRecorder) AggregateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateType", reflect.TypeOf((*MockAggregate)(nil).AggregateType))
}

// OriginalVersion mocks base method
func (m *MockAggregate) OriginalVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OriginalVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// OriginalVersion indicates an expected call of OriginalVersion
func (mr *MockAggregateMockRecorder) OriginalVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginalVersion", reflect.TypeOf((*MockAggregate)(nil).OriginalVersion))
}

// CurrentVersion mocks base method
func (m *MockAggregate) CurrentVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// CurrentVersion indicates an expected call of CurrentVersion
func (mr *MockAggregateMockRecorder) CurrentVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentVersion", reflect.TypeOf((*MockAggregate)(nil).CurrentVersion))
}

// Changes mocks base method
func (m *MockAggregate) Changes() []cqrs_es.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].([]cqrs_es.Event)
	return ret0
}

// Changes indicates an expected call of Changes
func (mr *MockAggregateMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockAggregate)(nil).Changes))
}

// TrackChange mocks base method
func (m *MockAggregate) TrackChange(arg0 ...cqrs_es.Event) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "TrackChange", varargs...)
}

// TrackChange indicates an expected call of TrackChange
func (mr *MockAggregateMockRecorder) TrackChange(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackChange", reflect.TypeOf((*MockAggregate)(nil).TrackChange), arg0...)
}

// FlushChanges mocks base method
func (m *MockAggregate) FlushChanges() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushChanges")
}

// FlushChanges indicates an expected call of FlushChanges
func (mr *MockAggregateMockRecorder) FlushChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushChanges", reflect.TypeOf((*MockAggregate)(nil).FlushChanges))
}

// ApplyEvent mocks base method
func (m *MockAggregate) ApplyEvent(arg0 cqrs_es.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyEvent indicates an expected call of ApplyEvent
func (mr *MockAggregateMockRecorder) ApplyEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyEvent", reflect.TypeOf((*MockAggregate)(nil).ApplyEvent), arg0)
}

// MockAggregateConfig is a mock of AggregateConfig interface
type MockAggregateConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateConfigMockRecorder
}

// MockAggregateConfigMockRecorder is the mock recorder for MockAggregateConfig
type MockAggregateConfigMockRecorder struct {
	mock *MockAggregateConfig
}

// NewMockAggregateConfig creates a new mock instance
func NewMockAggregateConfig(ctrl *gomock.Controller) *MockAggregateConfig {
	mock := &MockAggregateConfig{ctrl: ctrl}
	mock.recorder = &MockAggregateConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregateConfig) EXPECT() *MockAggregateConfigMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockAggregateConfig) Register(arg0 cqrs_es.AggregateType, arg1 cqrs_es.AggregateFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockAggregateConfigMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAggregateConfig)(nil).Register), arg0, arg1)
}

// New mocks base method
func (m *MockAggregateConfig) New(arg0 cqrs_es.AggregateType, arg1 uuid.UUID) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockAggregateConfigMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockAggregateConfig)(nil).New), arg0, arg1)
}

// Factories mocks base method
func (m *MockAggregateConfig) Factories() map[cqrs_es.AggregateType]cqrs_es.AggregateFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Factories")
	ret0, _ := ret[0].(map[cqrs_es.AggregateType]cqrs_es.AggregateFactory)
	return ret0
}

// Factories indicates an expected call of Factories
func (mr *MockAggregateConfigMockRecorder) Factories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Factories", reflect.TypeOf((*MockAggregateConfig)(nil).Factories))
}

// MockAggregateRepository is a mock of AggregateRepository interface
type MockAggregateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateRepositoryMockRecorder
}

// MockAggregateRepositoryMockRecorder is the mock recorder for MockAggregateRepository
type MockAggregateRepositoryMockRecorder struct {
	mock *MockAggregateRepository
}

// NewMockAggregateRepository creates a new mock instance
func NewMockAggregateRepository(ctrl *gomock.Controller) *MockAggregateRepository {
	mock := &MockAggregateRepository{ctrl: ctrl}
	mock.recorder = &MockAggregateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregateRepository) EXPECT() *MockAggregateRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockAggregateRepository) Save(ctx context.Context, aggregate cqrs_es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAggregateRepositoryMockRecorder) Save(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAggregateRepository)(nil).Save), ctx, aggregate)
}

// Fetch mocks base method
func (m *MockAggregateRepository) Fetch(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID, version int) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, typ, id, version)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockAggregateRepositoryMockRecorder) Fetch(ctx, typ, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockAggregateRepository)(nil).Fetch), ctx, typ, id, version)
}

// FetchWithBase mocks base method
func (m *MockAggregateRepository) FetchWithBase(ctx context.Context, aggregate cqrs_es.Aggregate, version int) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWithBase", ctx, aggregate, version)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWithBase indicates an expected call of FetchWithBase
func (mr *MockAggregateRepositoryMockRecorder) FetchWithBase(ctx, aggregate, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWithBase", reflect.TypeOf((*MockAggregateRepository)(nil).FetchWithBase), ctx, aggregate, version)
}

// FetchLatest mocks base method
func (m *MockAggregateRepository) FetchLatest(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatest", ctx, typ, id)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatest indicates an expected call of FetchLatest
func (mr *MockAggregateRepositoryMockRecorder) FetchLatest(ctx, typ, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatest", reflect.TypeOf((*MockAggregateRepository)(nil).FetchLatest), ctx, typ, id)
}

// FetchLatestWithBase mocks base method
func (m *MockAggregateRepository) FetchLatestWithBase(ctx context.Context, aggregate cqrs_es.Aggregate) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatestWithBase", ctx, aggregate)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatestWithBase indicates an expected call of FetchLatestWithBase
func (mr *MockAggregateRepositoryMockRecorder) FetchLatestWithBase(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatestWithBase", reflect.TypeOf((*MockAggregateRepository)(nil).FetchLatestWithBase), ctx, aggregate)
}

// Remove mocks base method
func (m *MockAggregateRepository) Remove(ctx context.Context, aggregate cqrs_es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockAggregateRepositoryMockRecorder) Remove(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockAggregateRepository)(nil).Remove), ctx, aggregate)
}

// Query mocks base method
func (m *MockAggregateRepository) Query(ctx context.Context, query cqrs_es.AggregateQuery) (cqrs_es.AggregateCursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query)
	ret0, _ := ret[0].(cqrs_es.AggregateCursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockAggregateRepositoryMockRecorder) Query(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockAggregateRepository)(nil).Query), ctx, query)
}

// MockSnapshotRepository is a mock of SnapshotRepository interface
type MockSnapshotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotRepositoryMockRecorder
}

// MockSnapshotRepositoryMockRecorder is the mock recorder for MockSnapshotRepository
type MockSnapshotRepositoryMockRecorder struct {
	mock *MockSnapshotRepository
}

// NewMockSnapshotRepository creates a new mock instance
func NewMockSnapshotRepository(ctrl *gomock.Controller) *MockSnapshotRepository {
	mock := &MockSnapshotRepository{ctrl: ctrl}
	mock.recorder = &MockSnapshotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotRepository) EXPECT() *MockSnapshotRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockSnapshotRepository) Save(ctx context.Context, snap cqrs_es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, snap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSnapshotRepositoryMockRecorder) Save(ctx, snap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSnapshotRepository)(nil).Save), ctx, snap)
}

// Find mocks base method
func (m *MockSnapshotRepository) Find(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID, version int) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, typ, id, version)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockSnapshotRepositoryMockRecorder) Find(ctx, typ, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSnapshotRepository)(nil).Find), ctx, typ, id, version)
}

// Latest mocks base method
func (m *MockSnapshotRepository) Latest(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", ctx, typ, id)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest
func (mr *MockSnapshotRepositoryMockRecorder) Latest(ctx, typ, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockSnapshotRepository)(nil).Latest), ctx, typ, id)
}

// MaxVersion mocks base method
func (m *MockSnapshotRepository) MaxVersion(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID, maxVersion int) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxVersion", ctx, typ, id, maxVersion)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxVersion indicates an expected call of MaxVersion
func (mr *MockSnapshotRepositoryMockRecorder) MaxVersion(ctx, typ, id, maxVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxVersion", reflect.TypeOf((*MockSnapshotRepository)(nil).MaxVersion), ctx, typ, id, maxVersion)
}

// Remove mocks base method
func (m *MockSnapshotRepository) Remove(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, typ, id, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockSnapshotRepositoryMockRecorder) Remove(ctx, typ, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSnapshotRepository)(nil).Remove), ctx, typ, id, version)
}

// RemoveAll mocks base method
func (m *MockSnapshotRepository) RemoveAll(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", ctx, typ, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockSnapshotRepositoryMockRecorder) RemoveAll(ctx, typ, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockSnapshotRepository)(nil).RemoveAll), ctx, typ, id)
}

// MockAggregateQuery is a mock of AggregateQuery interface
type MockAggregateQuery struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateQueryMockRecorder
}

// MockAggregateQueryMockRecorder is the mock recorder for MockAggregateQuery
type MockAggregateQueryMockRecorder struct {
	mock *MockAggregateQuery
}

// NewMockAggregateQuery creates a new mock instance
func NewMockAggregateQuery(ctrl *gomock.Controller) *MockAggregateQuery {
	mock := &MockAggregateQuery{ctrl: ctrl}
	mock.recorder = &MockAggregateQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregateQuery) EXPECT() *MockAggregateQueryMockRecorder {
	return m.recorder
}

// Types mocks base method
func (m *MockAggregateQuery) Types() []cqrs_es.AggregateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Types")
	ret0, _ := ret[0].([]cqrs_es.AggregateType)
	return ret0
}

// Types indicates an expected call of Types
func (mr *MockAggregateQueryMockRecorder) Types() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Types", reflect.TypeOf((*MockAggregateQuery)(nil).Types))
}

// IDs mocks base method
func (m *MockAggregateQuery) IDs() []uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IDs")
	ret0, _ := ret[0].([]uuid.UUID)
	return ret0
}

// IDs indicates an expected call of IDs
func (mr *MockAggregateQueryMockRecorder) IDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IDs", reflect.TypeOf((*MockAggregateQuery)(nil).IDs))
}

// MockAggregateCursor is a mock of AggregateCursor interface
type MockAggregateCursor struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateCursorMockRecorder
}

// MockAggregateCursorMockRecorder is the mock recorder for MockAggregateCursor
type MockAggregateCursorMockRecorder struct {
	mock *MockAggregateCursor
}

// NewMockAggregateCursor creates a new mock instance
func NewMockAggregateCursor(ctrl *gomock.Controller) *MockAggregateCursor {
	mock := &MockAggregateCursor{ctrl: ctrl}
	mock.recorder = &MockAggregateCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregateCursor) EXPECT() *MockAggregateCursorMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockAggregateCursor) Next(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockAggregateCursorMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockAggregateCursor)(nil).Next), arg0)
}

// Aggregate mocks base method
func (m *MockAggregateCursor) Aggregate() cqrs_es.Aggregate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate")
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	return ret0
}

// Aggregate indicates an expected call of Aggregate
func (mr *MockAggregateCursorMockRecorder) Aggregate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockAggregateCursor)(nil).Aggregate))
}

// Err mocks base method
func (m *MockAggregateCursor) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockAggregateCursorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockAggregateCursor)(nil).Err))
}

// Close mocks base method
func (m *MockAggregateCursor) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockAggregateCursorMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAggregateCursor)(nil).Close), arg0)
}
