// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_aggregate is a generated GoMock package.
package mock_aggregate

import (
	context "context"
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockRepository) Save(ctx context.Context, aggregate cqrs_es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockRepositoryMockRecorder) Save(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, aggregate)
}

// Fetch mocks base method
func (m *MockRepository) Fetch(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID, version int) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, typ, id, version)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockRepositoryMockRecorder) Fetch(ctx, typ, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRepository)(nil).Fetch), ctx, typ, id, version)
}

// FetchLatest mocks base method
func (m *MockRepository) FetchLatest(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatest", ctx, typ, id)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatest indicates an expected call of FetchLatest
func (mr *MockRepositoryMockRecorder) FetchLatest(ctx, typ, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatest", reflect.TypeOf((*MockRepository)(nil).FetchLatest), ctx, typ, id)
}

// Remove mocks base method
func (m *MockRepository) Remove(ctx context.Context, aggregate cqrs_es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockRepositoryMockRecorder) Remove(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRepository)(nil).Remove), ctx, aggregate)
}
