// Code generated by MockGen. DO NOT EDIT.
// Source: eventconfig.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventConfig is a mock of EventConfig interface
type MockEventConfig struct {
	ctrl     *gomock.Controller
	recorder *MockEventConfigMockRecorder
}

// MockEventConfigMockRecorder is the mock recorder for MockEventConfig
type MockEventConfigMockRecorder struct {
	mock *MockEventConfig
}

// NewMockEventConfig creates a new mock instance
func NewMockEventConfig(ctrl *gomock.Controller) *MockEventConfig {
	mock := &MockEventConfig{ctrl: ctrl}
	mock.recorder = &MockEventConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventConfig) EXPECT() *MockEventConfigMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockEventConfig) Register(arg0 cqrs_es.EventType, arg1 cqrs_es.EventData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockEventConfigMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockEventConfig)(nil).Register), arg0, arg1)
}

// NewData mocks base method
func (m *MockEventConfig) NewData(arg0 cqrs_es.EventType) (cqrs_es.EventData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewData", arg0)
	ret0, _ := ret[0].(cqrs_es.EventData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewData indicates an expected call of NewData
func (mr *MockEventConfigMockRecorder) NewData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewData", reflect.TypeOf((*MockEventConfig)(nil).NewData), arg0)
}

// Factories mocks base method
func (m *MockEventConfig) Factories() map[cqrs_es.EventType]cqrs_es.EventDataFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Factories")
	ret0, _ := ret[0].(map[cqrs_es.EventType]cqrs_es.EventDataFactory)
	return ret0
}

// Factories indicates an expected call of Factories
func (mr *MockEventConfigMockRecorder) Factories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Factories", reflect.TypeOf((*MockEventConfig)(nil).Factories))
}
