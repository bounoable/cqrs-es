// Code generated by MockGen. DO NOT EDIT.
// Source: aggregaterepo.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	context "context"
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockAggregateRepository is a mock of AggregateRepository interface
type MockAggregateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAggregateRepositoryMockRecorder
}

// MockAggregateRepositoryMockRecorder is the mock recorder for MockAggregateRepository
type MockAggregateRepositoryMockRecorder struct {
	mock *MockAggregateRepository
}

// NewMockAggregateRepository creates a new mock instance
func NewMockAggregateRepository(ctrl *gomock.Controller) *MockAggregateRepository {
	mock := &MockAggregateRepository{ctrl: ctrl}
	mock.recorder = &MockAggregateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAggregateRepository) EXPECT() *MockAggregateRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockAggregateRepository) Save(ctx context.Context, aggregate cqrs_es.Aggregate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, aggregate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAggregateRepositoryMockRecorder) Save(ctx, aggregate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAggregateRepository)(nil).Save), ctx, aggregate)
}

// Fetch mocks base method
func (m *MockAggregateRepository) Fetch(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID, version int) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, typ, id, version)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockAggregateRepositoryMockRecorder) Fetch(ctx, typ, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockAggregateRepository)(nil).Fetch), ctx, typ, id, version)
}

// FetchLatest mocks base method
func (m *MockAggregateRepository) FetchLatest(ctx context.Context, typ cqrs_es.AggregateType, id uuid.UUID) (cqrs_es.Aggregate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatest", ctx, typ, id)
	ret0, _ := ret[0].(cqrs_es.Aggregate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatest indicates an expected call of FetchLatest
func (mr *MockAggregateRepositoryMockRecorder) FetchLatest(ctx, typ, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatest", reflect.TypeOf((*MockAggregateRepository)(nil).FetchLatest), ctx, typ, id)
}
