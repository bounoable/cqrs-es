// Code generated by MockGen. DO NOT EDIT.
// Source: container.go

// Package mock_container is a generated GoMock package.
package mock_container

import (
	cqrs_es "github.com/bounoable/cqrs-es"
	aggregate "github.com/bounoable/cqrs-es/aggregate"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockContainer is a mock of Container interface
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// AggregateConfig mocks base method
func (m *MockContainer) AggregateConfig() cqrs_es.AggregateConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateConfig")
	ret0, _ := ret[0].(cqrs_es.AggregateConfig)
	return ret0
}

// AggregateConfig indicates an expected call of AggregateConfig
func (mr *MockContainerMockRecorder) AggregateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateConfig", reflect.TypeOf((*MockContainer)(nil).AggregateConfig))
}

// SetAggregateConfig mocks base method
func (m *MockContainer) SetAggregateConfig(arg0 cqrs_es.AggregateConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAggregateConfig", arg0)
}

// SetAggregateConfig indicates an expected call of SetAggregateConfig
func (mr *MockContainerMockRecorder) SetAggregateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAggregateConfig", reflect.TypeOf((*MockContainer)(nil).SetAggregateConfig), arg0)
}

// EventConfig mocks base method
func (m *MockContainer) EventConfig() cqrs_es.EventConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventConfig")
	ret0, _ := ret[0].(cqrs_es.EventConfig)
	return ret0
}

// EventConfig indicates an expected call of EventConfig
func (mr *MockContainerMockRecorder) EventConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConfig", reflect.TypeOf((*MockContainer)(nil).EventConfig))
}

// SetEventConfig mocks base method
func (m *MockContainer) SetEventConfig(arg0 cqrs_es.EventConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventConfig", arg0)
}

// SetEventConfig indicates an expected call of SetEventConfig
func (mr *MockContainerMockRecorder) SetEventConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventConfig", reflect.TypeOf((*MockContainer)(nil).SetEventConfig), arg0)
}

// CommandConfig mocks base method
func (m *MockContainer) CommandConfig() cqrs_es.CommandConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandConfig")
	ret0, _ := ret[0].(cqrs_es.CommandConfig)
	return ret0
}

// CommandConfig indicates an expected call of CommandConfig
func (mr *MockContainerMockRecorder) CommandConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandConfig", reflect.TypeOf((*MockContainer)(nil).CommandConfig))
}

// SetCommandConfig mocks base method
func (m *MockContainer) SetCommandConfig(arg0 cqrs_es.CommandConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommandConfig", arg0)
}

// SetCommandConfig indicates an expected call of SetCommandConfig
func (mr *MockContainerMockRecorder) SetCommandConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommandConfig", reflect.TypeOf((*MockContainer)(nil).SetCommandConfig), arg0)
}

// EventBus mocks base method
func (m *MockContainer) EventBus() cqrs_es.EventBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBus")
	ret0, _ := ret[0].(cqrs_es.EventBus)
	return ret0
}

// EventBus indicates an expected call of EventBus
func (mr *MockContainerMockRecorder) EventBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBus", reflect.TypeOf((*MockContainer)(nil).EventBus))
}

// EventPublisher mocks base method
func (m *MockContainer) EventPublisher() cqrs_es.EventPublisher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventPublisher")
	ret0, _ := ret[0].(cqrs_es.EventPublisher)
	return ret0
}

// EventPublisher indicates an expected call of EventPublisher
func (mr *MockContainerMockRecorder) EventPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventPublisher", reflect.TypeOf((*MockContainer)(nil).EventPublisher))
}

// EventSubscriber mocks base method
func (m *MockContainer) EventSubscriber() cqrs_es.EventSubscriber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventSubscriber")
	ret0, _ := ret[0].(cqrs_es.EventSubscriber)
	return ret0
}

// EventSubscriber indicates an expected call of EventSubscriber
func (mr *MockContainerMockRecorder) EventSubscriber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventSubscriber", reflect.TypeOf((*MockContainer)(nil).EventSubscriber))
}

// SetEventBus mocks base method
func (m *MockContainer) SetEventBus(arg0 cqrs_es.EventBus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventBus", arg0)
}

// SetEventBus indicates an expected call of SetEventBus
func (mr *MockContainerMockRecorder) SetEventBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventBus", reflect.TypeOf((*MockContainer)(nil).SetEventBus), arg0)
}

// EventStore mocks base method
func (m *MockContainer) EventStore() cqrs_es.EventStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStore")
	ret0, _ := ret[0].(cqrs_es.EventStore)
	return ret0
}

// EventStore indicates an expected call of EventStore
func (mr *MockContainerMockRecorder) EventStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStore", reflect.TypeOf((*MockContainer)(nil).EventStore))
}

// SetEventStore mocks base method
func (m *MockContainer) SetEventStore(arg0 cqrs_es.EventStore) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventStore", arg0)
}

// SetEventStore indicates an expected call of SetEventStore
func (mr *MockContainerMockRecorder) SetEventStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStore", reflect.TypeOf((*MockContainer)(nil).SetEventStore), arg0)
}

// CommandBus mocks base method
func (m *MockContainer) CommandBus() cqrs_es.CommandBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandBus")
	ret0, _ := ret[0].(cqrs_es.CommandBus)
	return ret0
}

// CommandBus indicates an expected call of CommandBus
func (mr *MockContainerMockRecorder) CommandBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandBus", reflect.TypeOf((*MockContainer)(nil).CommandBus))
}

// SetCommandBus mocks base method
func (m *MockContainer) SetCommandBus(arg0 cqrs_es.CommandBus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommandBus", arg0)
}

// SetCommandBus indicates an expected call of SetCommandBus
func (mr *MockContainerMockRecorder) SetCommandBus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommandBus", reflect.TypeOf((*MockContainer)(nil).SetCommandBus), arg0)
}

// Snapshots mocks base method
func (m *MockContainer) Snapshots() cqrs_es.SnapshotRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots")
	ret0, _ := ret[0].(cqrs_es.SnapshotRepository)
	return ret0
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockContainerMockRecorder) Snapshots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockContainer)(nil).Snapshots))
}

// SetSnapshots mocks base method
func (m *MockContainer) SetSnapshots(arg0 cqrs_es.SnapshotRepository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSnapshots", arg0)
}

// SetSnapshots indicates an expected call of SetSnapshots
func (mr *MockContainerMockRecorder) SetSnapshots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshots", reflect.TypeOf((*MockContainer)(nil).SetSnapshots), arg0)
}

// Aggregates mocks base method
func (m *MockContainer) Aggregates() aggregate.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregates")
	ret0, _ := ret[0].(aggregate.Repository)
	return ret0
}

// Aggregates indicates an expected call of Aggregates
func (mr *MockContainerMockRecorder) Aggregates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregates", reflect.TypeOf((*MockContainer)(nil).Aggregates))
}

// SetAggregates mocks base method
func (m *MockContainer) SetAggregates(arg0 aggregate.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAggregates", arg0)
}

// SetAggregates indicates an expected call of SetAggregates
func (mr *MockContainerMockRecorder) SetAggregates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAggregates", reflect.TypeOf((*MockContainer)(nil).SetAggregates), arg0)
}
