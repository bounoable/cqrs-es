// Code generated by MockGen. DO NOT EDIT.
// Source: core.go

// Package mock_cqrs is a generated GoMock package.
package mock_cqrs

import (
	cqrs_es "github.com/bounoable/cqrs-es"
	gomock "github.com/golang/mock/gomock"
	log "log"
	reflect "reflect"
)

// MockCore is a mock of Core interface
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
}

// MockCoreMockRecorder is the mock recorder for MockCore
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// AggregateConfig mocks base method
func (m *MockCore) AggregateConfig() cqrs_es.AggregateConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateConfig")
	ret0, _ := ret[0].(cqrs_es.AggregateConfig)
	return ret0
}

// AggregateConfig indicates an expected call of AggregateConfig
func (mr *MockCoreMockRecorder) AggregateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateConfig", reflect.TypeOf((*MockCore)(nil).AggregateConfig))
}

// EventConfig mocks base method
func (m *MockCore) EventConfig() cqrs_es.EventConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventConfig")
	ret0, _ := ret[0].(cqrs_es.EventConfig)
	return ret0
}

// EventConfig indicates an expected call of EventConfig
func (mr *MockCoreMockRecorder) EventConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventConfig", reflect.TypeOf((*MockCore)(nil).EventConfig))
}

// CommandConfig mocks base method
func (m *MockCore) CommandConfig() cqrs_es.CommandConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandConfig")
	ret0, _ := ret[0].(cqrs_es.CommandConfig)
	return ret0
}

// CommandConfig indicates an expected call of CommandConfig
func (mr *MockCoreMockRecorder) CommandConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandConfig", reflect.TypeOf((*MockCore)(nil).CommandConfig))
}

// EventBus mocks base method
func (m *MockCore) EventBus() cqrs_es.EventBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventBus")
	ret0, _ := ret[0].(cqrs_es.EventBus)
	return ret0
}

// EventBus indicates an expected call of EventBus
func (mr *MockCoreMockRecorder) EventBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventBus", reflect.TypeOf((*MockCore)(nil).EventBus))
}

// EventStore mocks base method
func (m *MockCore) EventStore() cqrs_es.EventStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventStore")
	ret0, _ := ret[0].(cqrs_es.EventStore)
	return ret0
}

// EventStore indicates an expected call of EventStore
func (mr *MockCoreMockRecorder) EventStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventStore", reflect.TypeOf((*MockCore)(nil).EventStore))
}

// CommandBus mocks base method
func (m *MockCore) CommandBus() cqrs_es.CommandBus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandBus")
	ret0, _ := ret[0].(cqrs_es.CommandBus)
	return ret0
}

// CommandBus indicates an expected call of CommandBus
func (mr *MockCoreMockRecorder) CommandBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandBus", reflect.TypeOf((*MockCore)(nil).CommandBus))
}

// Snapshots mocks base method
func (m *MockCore) Snapshots() cqrs_es.SnapshotRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots")
	ret0, _ := ret[0].(cqrs_es.SnapshotRepository)
	return ret0
}

// Snapshots indicates an expected call of Snapshots
func (mr *MockCoreMockRecorder) Snapshots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockCore)(nil).Snapshots))
}

// Aggregates mocks base method
func (m *MockCore) Aggregates() cqrs_es.AggregateRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregates")
	ret0, _ := ret[0].(cqrs_es.AggregateRepository)
	return ret0
}

// Aggregates indicates an expected call of Aggregates
func (mr *MockCoreMockRecorder) Aggregates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregates", reflect.TypeOf((*MockCore)(nil).Aggregates))
}

// MockSetup is a mock of Setup interface
type MockSetup struct {
	ctrl     *gomock.Controller
	recorder *MockSetupMockRecorder
}

// MockSetupMockRecorder is the mock recorder for MockSetup
type MockSetupMockRecorder struct {
	mock *MockSetup
}

// NewMockSetup creates a new mock instance
func NewMockSetup(ctrl *gomock.Controller) *MockSetup {
	mock := &MockSetup{ctrl: ctrl}
	mock.recorder = &MockSetupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetup) EXPECT() *MockSetupMockRecorder {
	return m.recorder
}

// SetLogger mocks base method
func (m *MockSetup) SetLogger(arg0 *log.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger
func (mr *MockSetupMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockSetup)(nil).SetLogger), arg0)
}

// SetAggregateConfig mocks base method
func (m *MockSetup) SetAggregateConfig(arg0 cqrs_es.AggregateConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAggregateConfig", arg0)
}

// SetAggregateConfig indicates an expected call of SetAggregateConfig
func (mr *MockSetupMockRecorder) SetAggregateConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAggregateConfig", reflect.TypeOf((*MockSetup)(nil).SetAggregateConfig), arg0)
}

// SetEventConfig mocks base method
func (m *MockSetup) SetEventConfig(arg0 cqrs_es.EventConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventConfig", arg0)
}

// SetEventConfig indicates an expected call of SetEventConfig
func (mr *MockSetupMockRecorder) SetEventConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventConfig", reflect.TypeOf((*MockSetup)(nil).SetEventConfig), arg0)
}

// SetCommandConfig mocks base method
func (m *MockSetup) SetCommandConfig(arg0 cqrs_es.CommandConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommandConfig", arg0)
}

// SetCommandConfig indicates an expected call of SetCommandConfig
func (mr *MockSetupMockRecorder) SetCommandConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommandConfig", reflect.TypeOf((*MockSetup)(nil).SetCommandConfig), arg0)
}

// SetEventStoreFactory mocks base method
func (m *MockSetup) SetEventStoreFactory(arg0 cqrs_es.EventStoreFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventStoreFactory", arg0)
}

// SetEventStoreFactory indicates an expected call of SetEventStoreFactory
func (mr *MockSetupMockRecorder) SetEventStoreFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventStoreFactory", reflect.TypeOf((*MockSetup)(nil).SetEventStoreFactory), arg0)
}

// SetEventBusFactory mocks base method
func (m *MockSetup) SetEventBusFactory(arg0 cqrs_es.EventBusFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventBusFactory", arg0)
}

// SetEventBusFactory indicates an expected call of SetEventBusFactory
func (mr *MockSetupMockRecorder) SetEventBusFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventBusFactory", reflect.TypeOf((*MockSetup)(nil).SetEventBusFactory), arg0)
}

// SetCommandBusFactory mocks base method
func (m *MockSetup) SetCommandBusFactory(arg0 cqrs_es.CommandBusFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommandBusFactory", arg0)
}

// SetCommandBusFactory indicates an expected call of SetCommandBusFactory
func (mr *MockSetupMockRecorder) SetCommandBusFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommandBusFactory", reflect.TypeOf((*MockSetup)(nil).SetCommandBusFactory), arg0)
}

// SetSnapshotRepositoryFactory mocks base method
func (m *MockSetup) SetSnapshotRepositoryFactory(arg0 cqrs_es.SnapshotRepositoryFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSnapshotRepositoryFactory", arg0)
}

// SetSnapshotRepositoryFactory indicates an expected call of SetSnapshotRepositoryFactory
func (mr *MockSetupMockRecorder) SetSnapshotRepositoryFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSnapshotRepositoryFactory", reflect.TypeOf((*MockSetup)(nil).SetSnapshotRepositoryFactory), arg0)
}

// SetAggregateRepositoryFactory mocks base method
func (m *MockSetup) SetAggregateRepositoryFactory(arg0 cqrs_es.AggregateRepositoryFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAggregateRepositoryFactory", arg0)
}

// SetAggregateRepositoryFactory indicates an expected call of SetAggregateRepositoryFactory
func (mr *MockSetupMockRecorder) SetAggregateRepositoryFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAggregateRepositoryFactory", reflect.TypeOf((*MockSetup)(nil).SetAggregateRepositoryFactory), arg0)
}

// RegisterAggregate mocks base method
func (m *MockSetup) RegisterAggregate(arg0 cqrs_es.AggregateType, arg1 cqrs_es.AggregateFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterAggregate", arg0, arg1)
}

// RegisterAggregate indicates an expected call of RegisterAggregate
func (mr *MockSetupMockRecorder) RegisterAggregate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAggregate", reflect.TypeOf((*MockSetup)(nil).RegisterAggregate), arg0, arg1)
}

// RegisterEvent mocks base method
func (m *MockSetup) RegisterEvent(arg0 cqrs_es.EventType, arg1 cqrs_es.EventDataFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterEvent", arg0, arg1)
}

// RegisterEvent indicates an expected call of RegisterEvent
func (mr *MockSetupMockRecorder) RegisterEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEvent", reflect.TypeOf((*MockSetup)(nil).RegisterEvent), arg0, arg1)
}

// RegisterCommand mocks base method
func (m *MockSetup) RegisterCommand(arg0 cqrs_es.CommandType, arg1 cqrs_es.CommandHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCommand", arg0, arg1)
}

// RegisterCommand indicates an expected call of RegisterCommand
func (mr *MockSetupMockRecorder) RegisterCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCommand", reflect.TypeOf((*MockSetup)(nil).RegisterCommand), arg0, arg1)
}
